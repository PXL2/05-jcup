import java_cup.runtime.*;

terminal Integer INTEIRO;
terminal MAIS, MENOS, VEZES, DIVISAO, RESTO, POTENCIA;
terminal PTVIRG, PARENTESQ, PARENTDIR;
terminal MENOSUNARIO;

non terminal inicio;
non terminal Integer expr;

precedence left MAIS, MENOS;
precedence left VEZES, DIVISAO, RESTO;
precedence right POTENCIA;
precedence right MENOSUNARIO;

start with inicio;

inicio ::= expr:e PTVIRG {: System.out.println(e); :}
         ;

expr ::= expr:a MAIS expr:b
         {: RESULT = a + b; :}

       | expr:a MENOS expr:b
         {: RESULT = a - b; :}

       | expr:a VEZES expr:b
         {: RESULT = a * b; :}

       | expr:a DIVISAO expr:b
         {:
            RESULT = a / b;
         :}
       | expr:a RESTO expr:b
         {:
            RESULT = a % b;
         :}
       | expr:a POTENCIA expr:b
         {: RESULT = (int) Math.pow(a, b); :}

       | MENOS expr:a
         {: RESULT = -a; :} %prec MENOSUNARIO

       | PARENTESQ expr:a PARENTDIR
         {: RESULT = a; :}

       | INTEIRO:a
         {: RESULT = a; :}
        ;
/*
Usar %prec:
  É importante quando um mesmo token tem dois significados diferentes (como o - unário e binário).
  Evita conflitos de precedência.
  Garante a construção correta da árvore sintática e a avaliação da expressão.

=> Usar %prec MENOSUNARIO para informar:
   "Essa regra tem a precedência do token MENOSUNARIO, 
    que foi declarado separadamente na seção de precedência".
*/
